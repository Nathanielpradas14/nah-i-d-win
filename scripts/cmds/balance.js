c𝗈𝗇𝗌𝗍 𝗌𝖾𝗋𝗏𝗂𝖼𝖾𝖢𝗁𝖺𝗋𝗀𝖾 = 𝟬.𝟭;
𝖿𝗎𝗇𝖼𝗍𝗂𝗈𝗇 𝖿𝗈𝗋𝗆𝖺𝗍𝖭𝗎𝗆𝖻𝖾𝗋(𝗇𝗎𝗆𝖻𝖾𝗋) {
𝖼𝗈𝗇𝗌𝗍 𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 = 𝖬𝖺𝗍𝗁.𝖺𝖻𝗌(𝗇𝗎𝗆𝖻𝖾𝗋);

  𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟮𝟭) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟮𝟭).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖲𝖾𝗑𝗍𝗂𝗅𝗅𝗂𝗈𝗇';
  } 𝖾𝗅𝗌𝖾 𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟭𝟴) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟭𝟴).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖰𝗎𝗂𝗇𝗍𝗂𝗅𝗅𝗂𝗈𝗇';
  } 𝖾𝗅𝗌𝖾 𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟭𝟱) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟭𝟱).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖰𝗎𝖺𝖽𝗋𝗂𝗅𝗅𝗂𝗈𝗇';
  } 𝖾𝗅𝗌𝖾 𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟭𝟮) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟭𝟮).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖳𝗋𝗂𝗅𝗅𝗂𝗈𝗇';
  } 𝖾𝗅𝗌𝖾 𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟵) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟵).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖡𝗂𝗅𝗅𝗂𝗈𝗇';
  } 𝖾𝗅𝗌𝖾 𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟲) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟲).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖬𝗂𝗅𝗅𝗂𝗈𝗇';
  } 𝖾𝗅𝗌𝖾 𝗂𝖿 (𝖺𝖻𝗌𝖭𝗎𝗆𝖻𝖾𝗋 >= 𝟭𝖾𝟯) {
    𝗋𝖾𝗍𝗎𝗋𝗇 (𝗇𝗎𝗆𝖻𝖾𝗋 / 𝟭𝖾𝟯).𝗍𝗈𝖥𝗂𝗑𝖾𝖽(𝟮) + ' 𝖳𝗁𝗈𝗎𝗌𝖺𝗇𝖽';
  } 𝖾𝗅𝗌𝖾 {
    𝗋𝖾𝗍𝗎𝗋𝗇 𝖲𝗍𝗋𝗂𝗇𝗀(𝗇𝗎𝗆𝖻𝖾𝗋);
  }
}
𝖼𝗈𝗇𝗌𝗍 { 𝖿𝗂𝖻𝗈𝗇𝖺𝖼𝖼𝗂, 𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍 } = 𝖭𝗂𝖼𝖺𝖡𝗈𝖳.𝗀𝖾𝗍𝖴𝗍𝗂𝗅𝗌("𝖱𝖺𝗇𝗄");

𝖭𝗂𝖼𝖺𝖡𝗈𝖳.𝗆𝗈𝖽𝗎𝗅𝖾 = {
  𝖼𝗈𝗇𝖿𝗂𝗀: {
    𝗇𝖺𝗆𝖾: ["𝖻𝖺𝗅𝖺𝗇𝖼𝖾", "𝖻𝖺𝗅", "𝖼𝗈𝗂𝗇", "𝖼𝖺𝗌𝗁", "𝗆𝗈𝗇𝖾𝗒"],
    𝗏𝖾𝗋𝗌𝗂𝗈𝗇: "𝟭.𝟬.𝟬",
    𝖽𝖾𝗌𝖼𝗋𝗂𝗉𝗍𝗂𝗈𝗇: "𝖣𝗂𝗌𝗉𝗅𝖺𝗒𝗌 𝗒𝗈𝗎𝗋 𝗂𝗇-𝗀𝖺𝗆𝖾 𝖻𝖺𝗅𝖺𝗇𝖼𝖾.",
    𝖺𝗎𝗍𝗁𝗈𝗋: "𝖭𝗂𝖼𝖺𝖺 | 𝖫𝗂𝖺𝗇𝖾",
    𝗇𝗈𝖯𝖬: 𝖿𝖺𝗅𝗌𝖾,
    𝗇𝗈𝖦𝖢: 𝖿𝖺𝗅𝗌𝖾,
    𝖺𝖽𝗆𝗂𝗇𝖮𝗇𝗅𝗒: 𝖿𝖺𝗅𝗌𝖾,
    𝗎𝗌𝖺𝗀𝖾: "𝖻𝖺𝗅",
    𝗇𝗈𝖯𝗋𝖾𝖿𝗂𝗑: 𝗍𝗋𝗎𝖾
  },
  𝗌𝗍𝗒𝗅𝖾: {
    𝗍𝗂𝗍𝗅𝖾: {
      𝗍𝖾𝗑𝗍: "💰 𝖡𝖺𝗅𝖺𝗇𝖼𝖾",
      𝖿𝗈𝗇𝗍: "𝖻𝗈𝗅𝖽",
      𝗅𝗂𝗇𝖾: 𝗍𝗋𝗎𝖾
    },
    𝖼𝗈𝗇𝗍𝖾𝗇𝗍: {
      𝗍𝖾𝗑𝗍: 𝖿𝖺𝗅𝗌𝖾,
      𝖿𝗈𝗇𝗍: "𝖿𝖺𝗇𝖼𝗒",
      𝗉𝖾𝗋𝖫𝗂𝗇𝖾𝖲𝗒𝗆𝖻𝗈𝗅𝟮: '➤'
    }
  },
  𝗆𝖺𝗂𝗇: 𝖺𝗌𝗒𝗇𝖼 𝖿𝗎𝗇𝖼𝗍𝗂𝗈𝗇 ({ 𝗂𝗇𝗉𝗎𝗍, 𝗈𝗎𝗍𝗉𝗎𝗍 }) {
  𝗂𝖿 (𝗂𝗇𝗉𝗎𝗍.𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌[𝟬] === '𝗍𝗈𝗉') {
    𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝖲𝗍𝗒𝗅𝖾({ 
      𝗍𝗂𝗍𝗅𝖾: {
        𝗍𝖾𝗑𝗍: "🏆 𝖱𝗂𝖼𝗁𝖾𝗌𝗍 𝖡𝖺𝗅𝖺𝗇𝖼𝖾"
      }
    });
      𝖼𝗈𝗇𝗌𝗍 𝖺𝗅𝗅𝖣𝖺𝗍𝖺 = 𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍𝖠𝗅𝗅();
      𝖼𝗈𝗇𝗌𝗍 𝗍𝗈𝗉𝖫𝗂𝗌𝗍 = 𝖮𝖻𝗃𝖾𝖼𝗍.𝖾𝗇𝗍𝗋𝗂𝖾𝗌(𝖺𝗅𝗅𝖣𝖺𝗍𝖺)
        .𝖿𝗂𝗅𝗍𝖾𝗋(([𝗎𝗂𝖽, 𝖽𝖺𝗍𝖺]) => 𝖽𝖺𝗍𝖺.𝗇𝖺𝗆𝖾 && 𝖽𝖺𝗍𝖺.𝗆𝗈𝗇𝖾𝗒 !== [ 𝖴𝖭𝖣𝖤𝖥𝖨𝖭𝖤𝖣 ])
        .𝗌𝗈𝗋𝗍((𝖺, 𝖻) => 𝖻[𝟭].𝗆𝗈𝗇𝖾𝗒 - 𝖺[𝟭].𝗆𝗈𝗇𝖾𝗒)
        .𝗌𝗅𝗂𝖼𝖾(𝟬, 𝟭𝟬);

      𝖼𝗈𝗇𝗌𝗍 𝖿𝗈𝗋𝗆𝖺𝗍𝗍𝖾𝖽𝖳𝗈𝗉𝖫𝗂𝗌𝗍 = 𝗍𝗈𝗉𝖫𝗂𝗌𝗍.𝗆𝖺𝗉(([𝗎𝗂𝖽, 𝖽𝖺𝗍𝖺], 𝗂𝗇𝖽𝖾𝗑) => {
        𝖼𝗈𝗇𝗌𝗍 { 𝗇𝖺𝗆𝖾, 𝗆𝗈𝗇𝖾𝗒, 𝖾𝗑𝗉 } = 𝖽𝖺𝗍𝖺;
        
        𝗋𝖾𝗍𝗎𝗋𝗇 `
${𝗂𝗇𝖽𝖾𝗑 + 𝟭}. ${𝗇𝖺𝗆𝖾} 💰
${𝖿𝗈𝗋𝗆𝖺𝗍𝖭𝗎𝗆𝖻𝖾𝗋(𝗆𝗈𝗇𝖾𝗒)} / ${𝖿𝗈𝗋𝗆𝖺𝗍𝖭𝗎𝗆𝖻𝖾𝗋(𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍.𝗀𝖾𝗍(𝖽𝖺𝗍𝖺))}
`;
      });

      𝖼𝗈𝗇𝗌𝗍 𝗋𝖾𝗌𝗉𝗈𝗇𝗌𝖾 = 𝖿𝗈𝗋𝗆𝖺𝗍𝗍𝖾𝖽𝖳𝗈𝗉𝖫𝗂𝗌𝗍.𝗅𝖾𝗇𝗀𝗍𝗁
        ? `💰 𝖳𝗈𝗉 𝟭𝟬 𝖫𝗂𝗌𝗍:
        ${𝖿𝗈𝗋𝗆𝖺𝗍𝗍𝖾𝖽𝖳𝗈𝗉𝖫𝗂𝗌𝗍.𝗃𝗈𝗂𝗇('\𝗇')}`
        : '𝖭𝗈 𝖽𝖺𝗍𝖺 𝖺𝗏𝖺𝗂𝗅𝖺𝖻𝗅𝖾 𝖿𝗈𝗋 𝗍𝗁𝖾 𝗍𝗈𝗉 𝗅𝗂𝗌𝗍.';

      𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝗋𝖾𝗌𝗉𝗈𝗇𝗌𝖾);
  }
    𝗂𝖿 (𝗂𝗇𝗉𝗎𝗍.𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌[𝟬] === '𝗋𝖾𝗀𝗂𝗌𝗍𝖾𝗋') {
      𝖼𝗈𝗇𝗌𝗍 𝗇𝖾𝗐𝖣𝖺𝗍𝖺 = 𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍(𝗂𝗇𝗉𝗎𝗍.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣);
      𝖼𝗈𝗇𝗌𝗍 { 𝗇𝖺𝗆𝖾, 𝗆𝗈𝗇𝖾𝗒 } = 𝗇𝖾𝗐𝖣𝖺𝗍𝖺;
      𝗂𝖿(𝗆𝗈𝗇𝖾𝗒) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚈𝚘𝚞 𝚊𝚛𝚎 𝚊𝚕𝚛𝚎𝚊𝚍𝚢 𝚛𝚎𝚐𝚒𝚜𝚝𝚎𝚛𝚎𝚍.)
      }
      𝗂𝖿 (𝗇𝖺𝗆𝖾) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(⚠️ | 𝚃𝚑𝚒𝚜 𝚒𝚗𝚏𝚒𝚗𝚒𝚝𝚎 𝚖𝚘𝚗𝚎𝚢 𝚐𝚕𝚒𝚝𝚌𝚑 𝚑𝚊𝚜 𝚋𝚎𝚎𝚗 𝚙𝚊𝚝𝚌𝚑𝚎𝚍!)
      }
      𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚃𝚑𝚊𝚗𝚔𝚜 𝚏𝚘𝚛 𝚛𝚎𝚐𝚒𝚜𝚝𝚛𝚊𝚝𝚒𝚘𝚗, 𝚑𝚎𝚛𝚎 𝚒𝚜 𝚢𝚘𝚞𝚛 𝚏𝚛𝚎𝚎 𝟭𝟬𝟬𝟬 𝚌𝚘𝚒𝚗𝚜 𝚊𝚜 𝚊 𝚠𝚎𝚕𝚌𝚘𝚖𝚎 𝚏𝚛𝚎𝚎𝚋𝚒𝚎!);
      𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗌𝖾𝗍(𝗂𝗇𝗉𝗎𝗍.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣, { 𝗆𝗈𝗇𝖾𝗒: 𝟭𝟬𝟬𝟬 });
      𝗋𝖾𝗍𝗎𝗋𝗇;

    }
    𝗂𝖿 (𝗂𝗇𝗉𝗎𝗍.𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌[𝟬] === '𝗌𝖾𝗇𝖽') {
      𝗅𝖾𝗍 𝗍𝖺𝗋𝗀𝖾𝗍𝖨𝖣 = 𝗂𝗇𝗉𝗎𝗍.𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌[𝟮];
      𝗂𝖿 (𝗂𝗇𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗂𝖾𝗋) {
        𝗍𝖺𝗋𝗀𝖾𝗍𝖨𝖣 = 𝗂𝗇𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗂𝖾𝗋.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣;
      }
      𝗂𝖿 (𝖮𝖻𝗃𝖾𝖼𝗍.𝗄𝖾𝗒𝗌(𝗂𝗇𝗉𝗎𝗍.𝗆𝖾𝗇𝗍𝗂𝗈𝗇𝗌).𝗅𝖾𝗇𝗀𝗍𝗁 > 𝟬) {
      𝗍𝖺𝗋𝗀𝖾𝗍𝖨𝖣 = 𝖮𝖻𝗃𝖾𝖼𝗍.𝗄𝖾𝗒𝗌(𝗂𝗇𝗉𝗎𝗍.𝗆𝖾𝗇𝗍𝗂𝗈𝗇𝗌)[𝟬];
      }
      𝖼𝗈𝗇𝗌𝗍 𝖺𝗆𝗈𝗎𝗇𝗍 = 𝗉𝖺𝗋𝗌𝖾𝖨𝗇𝗍(𝗂𝗇𝗉𝗎𝗍.𝖺𝗋𝗀𝗎𝗆𝖾𝗇𝗍𝗌[𝟭]);
      𝗂𝖿 (!𝗍𝖺𝗋𝗀𝖾𝗍𝖨𝖣 || ! 𝖺𝗆𝗈𝗎𝗇𝗍|| 𝗂𝗌𝖭𝖺𝖭(𝖺𝗆𝗈𝗎𝗇𝗍)) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(`𝖯𝗅𝖾𝖺𝗌𝖾 𝖾𝗇𝗍𝖾𝗋 𝖺 𝗏𝖺𝗅𝗂𝖽 𝖴𝖨𝖣 𝖺𝗇𝖽 𝖺𝗆𝗈𝗎𝗇𝗍, 𝗒𝗈𝗎 𝖼𝖺𝗇 𝗋𝖾𝗉𝗅𝗒 𝗈𝗋 𝗆𝖾𝗇𝗍𝗂𝗈𝗇.
${𝗂𝗇𝗉𝗎𝗍.𝖻𝗈𝖽𝗒.𝗌𝗉𝗅𝗂𝗍(" ")[𝟬]} 𝗌𝖾𝗇𝖽 <𝖺𝗆𝗈𝗎𝗇𝗍> <𝗎𝗂𝖽/𝗋𝖾𝗉𝗅𝗒/𝗆𝖾𝗇𝗍𝗂𝗈𝗇>`);
      }
      𝖼𝗈𝗇𝗌𝗍 𝗌𝖾𝗇𝖽𝖾𝗋𝖣𝖺𝗍𝖺 = 𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍(𝗂𝗇𝗉𝗎𝗍.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣);
      𝖼𝗈𝗇𝗌𝗍 𝗋𝖾𝖼𝗂𝗉𝗂𝖾𝗇𝗍𝖣𝖺𝗍𝖺 = 𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍(𝗍𝖺𝗋𝗀𝖾𝗍𝖨𝖣);
      𝗂𝖿 (𝖮𝖻𝗃𝖾𝖼𝗍.𝗄𝖾𝗒𝗌(𝗌𝖾𝗇𝖽𝖾𝗋𝖣𝖺𝗍𝖺).𝗅𝖾𝗇𝗀𝗍𝗁 < 𝟭|| 𝖮𝖻𝗃𝖾𝖼𝗍.𝗄𝖾𝗒𝗌(𝗋𝖾𝖼𝗂𝗉𝗂𝖾𝗇𝗍𝖣𝖺𝗍𝖺).𝗅𝖾𝗇𝗀𝗍𝗁 < 𝟭) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝙾𝚗𝚎 𝚘𝚛 𝚋𝚘𝚝𝚑 𝚞𝚜𝚎𝚛𝚜 𝚊𝚛𝚎 𝚗𝚘𝚝 𝚛𝚎𝚐𝚒𝚜𝚝𝚎𝚛𝚎𝚍.);
      }
      𝗂𝖿 (𝗌𝖾𝗇𝖽𝖾𝗋𝖣𝖺𝗍𝖺.𝗆𝗈𝗇𝖾𝗒 < 𝖺𝗆𝗈𝗎𝗇𝗍) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚆𝚊𝚔𝚎 𝚞𝚙, 𝚢𝚘𝚞 𝚍𝚘𝚗𝚝 𝚑𝚊𝚟𝚎 𝚎𝚗𝚘𝚞𝚐𝚑 𝚌𝚘𝚒𝚗𝚜 𝚝𝚘 𝚜𝚎𝚗𝚍!);
      }
      𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗌𝖾𝗍(𝗂𝗇𝗉𝗎𝗍.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣, {
        𝗆𝗈𝗇𝖾𝗒: 𝗌𝖾𝗇𝖽𝖾𝗋𝖣𝖺𝗍𝖺.𝗆𝗈𝗇𝖾𝗒 - 𝖺𝗆𝗈𝗎𝗇𝗍
      });
      𝖼𝗈𝗇𝗌𝗍 𝗇𝖾𝗐𝖠𝗆𝗈𝗎𝗇𝗍 = 𝖺𝗆𝗈𝗎𝗇𝗍 - (𝖺𝗆𝗈𝗎𝗇𝗍 * 𝗌𝖾𝗋𝗏𝗂𝖼𝖾𝖢𝗁𝖺𝗋𝗀𝖾)
      𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗌𝖾𝗍(𝗍𝖺𝗋𝗀𝖾𝗍𝖨𝖣, {
        𝗆𝗈𝗇𝖾𝗒: 𝗋𝖾𝖼𝗂𝗉𝗂𝖾𝗇𝗍𝖣𝖺𝗍𝖺.𝗆𝗈𝗇𝖾𝗒 +  𝗇𝖾𝗐𝖠𝗆𝗈𝗎𝗇𝗍
      });
      𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚂𝚞𝚌𝚌𝚎𝚜𝚜𝚏𝚞𝚕𝚕𝚢 𝚜𝚎𝚗𝚝 ${𝚗𝚎𝚠𝙰𝚖𝚘𝚞𝚗𝚝} 𝚌𝚘𝚒𝚗𝚜 𝚝𝚘 ${𝚛𝚎𝚌𝚒𝚙𝚒𝚎𝚗𝚝𝙳𝚊𝚝𝚊.𝚗𝚊𝚖𝚎}, 𝚠𝚒𝚝𝚑 𝚜𝚎𝚛𝚟𝚒𝚌𝚎 𝚌𝚑𝚊𝚛𝚐𝚎 𝚘𝚏 ${𝚜𝚎𝚛𝚟𝚒𝚌𝚎𝙲𝚑𝚊𝚛𝚐𝚎 * 𝟭𝟬𝟬}% 𝚠𝚑𝚒𝚌𝚑 𝚌𝚘𝚜𝚝𝚎𝚍 ${𝚊𝚖𝚘𝚞𝚗𝚝 - 𝚗𝚎𝚠𝙰𝚖𝚘𝚞𝚗𝚝}.);
    }


    𝗂𝖿 (𝖮𝖻𝗃𝖾𝖼𝗍.𝗄𝖾𝗒𝗌(𝗂𝗇𝗉𝗎𝗍.𝗆𝖾𝗇𝗍𝗂𝗈𝗇𝗌).𝗅𝖾𝗇𝗀𝗍𝗁 > 𝟬) {
			𝖼𝗈𝗇𝗌𝗍 𝗎𝗂𝖽𝗌 = 𝖮𝖻𝗃𝖾𝖼𝗍.𝗄𝖾𝗒𝗌(𝗂𝗇𝗉𝗎𝗍.𝗆𝖾𝗇𝗍𝗂𝗈𝗇𝗌);
			𝗅𝖾𝗍 𝗆𝗌𝗀 = "";
			𝖿𝗈𝗋 (𝖼𝗈𝗇𝗌𝗍 𝗎𝗂𝖽 𝗈𝖿 𝗎𝗂𝖽𝗌) {
				𝖼𝗈𝗇𝗌𝗍 𝗎𝗌𝖾𝗋𝖬𝗈𝗇𝖾𝗒 = (𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍(𝗎𝗂𝖽)).𝗆𝗈𝗇𝖾𝗒;
				𝗆𝗌𝗀 += ${𝚒𝚗𝚙𝚞𝚝.𝚖𝚎𝚗𝚝𝚒𝚘𝚗𝚜[𝚞𝚒𝚍].𝚛𝚎𝚙𝚕𝚊𝚌𝚎("@", "")} 𝚑𝚊𝚜 ${𝚞𝚜𝚎𝚛𝙼𝚘𝚗𝚎𝚢} 𝚌𝚘𝚒𝚗𝚜.\𝚗;
			}
			𝗋𝖾𝗍𝗎𝗋𝗇 𝗆𝖾𝗌𝗌𝖺𝗀𝖾.𝗋𝖾𝗉𝗅𝗒(𝗆𝗌𝗀);
    }
    𝗂𝖿 (𝗂𝗇𝗉𝗎𝗍.𝗆𝖾𝗌𝗌𝖺𝗀𝖾𝖱𝖾𝗉𝗅𝗒) {
      𝖼𝗈𝗇𝗌𝗍 𝗁𝗂𝗌𝖣𝖺𝗍𝖺 = 𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍(𝗂𝗇𝗉𝗎𝗍.𝗆𝖾𝗌𝗌𝖺𝗀𝖾𝖱𝖾𝗉𝗅𝗒.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣);
      𝗂𝖿 (!𝗁𝗂𝗌𝖣𝖺𝗍𝖺) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(${𝚗𝚊𝚖𝚎} 𝚒𝚜 𝚗𝚘𝚝 𝚢𝚎𝚝 𝚛𝚎𝚐𝚒𝚜𝚝𝚎𝚛𝚎𝚍 𝚒𝚗 𝚘𝚞𝚛 𝚜𝚢𝚜𝚝𝚎𝚖.);
      }
      𝖼𝗈𝗇𝗌𝗍 { 𝗇𝖺𝗆𝖾, 𝗆𝗈𝗇𝖾𝗒 } = 𝗁𝗂𝗌𝖣𝖺𝗍𝖺;
      
      𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(${𝚗𝚊𝚖𝚎} 𝚑𝚊𝚜 ${𝚖𝚘𝚗𝚎𝚢 ?? 𝟬} / ${𝚜𝚝𝚘𝚛𝚊𝚐𝚎𝙻𝚒𝚖𝚒𝚝.𝚐𝚎𝚝(𝚑𝚒𝚜𝙳𝚊𝚝𝚊)} 𝚌𝚘𝚒𝚗𝚜.);
    } 𝖾𝗅𝗌𝖾 {
      𝖼𝗈𝗇𝗌𝗍 𝖽𝖺𝗍𝖺 = 𝖺𝗐𝖺𝗂𝗍 𝖻𝗈𝗍𝖣𝖺𝗍𝖺.𝗀𝖾𝗍(𝗂𝗇𝗉𝗎𝗍.𝗌𝖾𝗇𝖽𝖾𝗋𝖨𝖣);
      𝗂𝖿 (!𝖽𝖺𝗍𝖺) {
        𝗋𝖾𝗍𝗎𝗋𝗇 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚈𝚘𝚞 𝚊𝚛𝚎 𝚗𝚘𝚝 𝚢𝚎𝚝 𝚛𝚎𝚐𝚒𝚜𝚝𝚎𝚛𝚎𝚍 𝚒𝚗 𝚘𝚞𝚛 𝚜𝚢𝚜𝚝𝚎𝚖.);
      }
      𝖼𝗈𝗇𝗌𝗍 { 𝗇𝖺𝗆𝖾, 𝗆𝗈𝗇𝖾𝗒 } = 𝖽𝖺𝗍𝖺;
      
      //𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚈𝚘𝚞 𝚑𝚊𝚟𝚎 ${𝚖𝚘𝚗𝚎𝚢 ?? 𝟬} 𝚌𝚘𝚒𝚗𝚜.);
      𝖼𝗈𝗇𝗌𝗍 𝗂𝗇𝖿𝗈 = 𝖺𝗐𝖺𝗂𝗍 𝗈𝗎𝗍𝗉𝗎𝗍.𝗋𝖾𝗉𝗅𝗒(𝚈𝚘𝚞);
      𝖺𝗐𝖺𝗂𝗍 𝗇𝖾𝗐 𝖯𝗋𝗈𝗆𝗂𝗌𝖾(𝗋𝖾𝗌𝗈𝗅𝗏𝖾 => 𝗌𝖾𝗍𝖳𝗂𝗆𝖾𝗈𝗎𝗍(𝗋𝖾𝗌𝗈𝗅𝗏𝖾, 𝟱𝟬𝟬));
      𝗈𝗎𝗍𝗉𝗎𝗍.𝖾𝖽𝗂𝗍(𝚈𝚘𝚞 𝚑𝚊𝚟𝚎, 𝗂𝗇𝖿𝗈.𝗆𝖾𝗌𝗌𝖺𝗀𝖾𝖨𝖣);
      𝖺𝗐𝖺𝗂𝗍 𝗇𝖾𝗐 𝖯𝗋𝗈𝗆𝗂𝗌𝖾(𝗋𝖾𝗌𝗈𝗅𝗏𝖾 => 𝗌𝖾𝗍𝖳𝗂𝗆𝖾𝗈𝗎𝗍(𝗋𝖾𝗌𝗈𝗅𝗏𝖾, 𝟱𝟬𝟬));
      𝗈𝗎𝗍𝗉𝗎𝗍.𝖾𝖽𝗂𝗍(𝚈𝚘𝚞 𝚑𝚊𝚟𝚎 ${𝚖𝚘𝚗𝚎𝚢 ?? 𝟬}, 𝗂𝗇𝖿𝗈.𝗆𝖾𝗌𝗌𝖺𝗀𝖾𝖨𝖣);
      𝖺𝗐𝖺𝗂𝗍 𝗇𝖾𝗐 𝖯𝗋𝗈𝗆𝗂𝗌𝖾(𝗋𝖾𝗌𝗈𝗅𝗏𝖾 => 𝗌𝖾𝗍𝖳𝗂𝗆𝖾𝗈𝗎𝗍(𝗋𝖾𝗌𝗈𝗅𝗏𝖾, 𝟱𝟬𝟬));
      𝗈𝗎𝗍𝗉𝗎𝗍.𝖾𝖽𝗂𝗍(`𝖸𝗈𝗎 𝗁𝖺𝗏𝖾 ${𝗆𝗈𝗇𝖾𝗒 ?? 𝟬} / ${𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍.𝗀𝖾𝗍(𝖽𝖺𝗍𝖺)} 𝖼𝗈𝗂𝗇𝗌.

📦 𝖳𝗈𝗍𝖺𝗅: 𝗅𝗈𝖺𝖽𝗂𝗇𝗀...
💰 𝖴𝗌𝖾𝖽: 𝗅𝗈𝖺𝖽𝗂𝗇𝗀...
📥 𝖥𝗋𝖾𝖾: 𝗅𝗈𝖺𝖽𝗂𝗇𝗀...`, 𝗂𝗇𝖿𝗈.𝗆𝖾𝗌𝗌𝖺𝗀𝖾𝖨𝖣);
      𝖺𝗐𝖺𝗂𝗍 𝗇𝖾𝗐 𝖯𝗋𝗈𝗆𝗂𝗌𝖾(𝗋𝖾𝗌𝗈𝗅𝗏𝖾 => 𝗌𝖾𝗍𝖳𝗂𝗆𝖾𝗈𝗎𝗍(𝗋𝖾𝗌𝗈𝗅𝗏𝖾, 𝟮𝟬𝟬𝟬));
𝖼𝗈𝗇𝗌𝗍 𝗍𝗈𝗍𝖺𝗅𝖲𝗍𝗈𝗋𝖺𝗀𝖾 = 𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍.𝗀𝖾𝗍(𝖽𝖺𝗍𝖺);
𝖼𝗈𝗇𝗌𝗍 𝗎𝗌𝖾𝖽𝖲𝗍𝗈𝗋𝖺𝗀𝖾 = 𝗆𝗈𝗇𝖾𝗒;

𝖼𝗈𝗇𝗌𝗍 𝗉𝖾𝗋𝖼𝖾𝗇𝗍𝖺𝗀𝖾𝖴𝗌𝖾𝖽 = (𝗎𝗌𝖾𝖽𝖲𝗍𝗈𝗋𝖺𝗀𝖾 / 𝗍𝗈𝗍𝖺𝗅𝖲𝗍𝗈𝗋𝖺𝗀𝖾) * 𝟭𝟬𝟬;
𝖼𝗈𝗇𝗌𝗍 𝗉𝖾𝗋𝖼𝖾𝗇𝗍𝖺𝗀𝖾𝖥𝗋𝖾𝖾 = 𝟭𝟬𝟬 - 𝗉𝖾𝗋𝖼𝖾𝗇𝗍𝖺𝗀𝖾𝖴𝗌𝖾𝖽;


      𝗈𝗎𝗍𝗉𝗎𝗍.𝖾𝖽𝗂𝗍(`𝖸𝗈𝗎 𝗁𝖺𝗏𝖾 ${𝗆𝗈𝗇𝖾𝗒 ?? 𝟬} / ${𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍.𝗀𝖾𝗍(𝖽𝖺𝗍𝖺)} 𝖼𝗈𝗂𝗇𝗌.

📦 𝖳𝗈𝗍𝖺𝗅: ${𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍.𝗀𝖾𝗍(𝖽𝖺𝗍𝖺)} 𝖼𝗈𝗂𝗇𝗌
💰 𝖴𝗌𝖾𝖽: ${𝗆𝗈𝗇𝖾𝗒} 𝖼𝗈𝗂𝗇𝗌
📥 𝖥𝗋𝖾𝖾: ${𝗌𝗍𝗈𝗋𝖺𝗀𝖾𝖫𝗂𝗆𝗂𝗍.𝗀𝖾𝗍(𝖽𝖺𝗍𝖺) - 𝗆𝗈𝗇𝖾𝗒} 𝖼𝗈𝗂𝗇𝗌

𝖸𝗈𝗎 𝗁𝖺𝗏𝖾 𝗎𝗌𝖾𝖽 ${𝗉𝖾𝗋𝖼𝖾𝗇𝗍𝖺𝗀𝖾𝖴𝗌𝖾𝖽}% 𝗈𝖿 𝗒𝗈𝗎𝗋 𝗌𝗍𝗈𝗋𝖺𝗀𝖾!`, 𝗂𝗇𝖿𝗈.𝗆𝖾𝗌𝗌𝖺𝗀𝖾𝖨𝖣);

    }
  },
};
